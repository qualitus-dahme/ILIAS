<?php
/**
 * This file is part of ILIAS, a powerful learning management system
 * published by ILIAS open source e-Learning e.V.
 *
 * ILIAS is licensed with the GPL-3.0,
 * see https://www.gnu.org/licenses/gpl-3.0.en.html
 * You should have received a copy of said license along with the
 * source code, too.
 *
 * If this is not the case or you just want to try ILIAS, you'll find
 * us at:
 * https://www.ilias.de
 * https://github.com/ILIAS-eLearning
 *
 *********************************************************************/

/**
 * Class CookieJarWrapperTest
 *
 * @author  Nicolas Schäfli <ns@studer-raimann.ch>
 */

namespace ILIAS\HTTP\Cookies;

use PHPUnit\Framework\Attributes\BackupGlobals;
use PHPUnit\Framework\Attributes\BackupStaticProperties;
use PHPUnit\Framework\Attributes\PreserveGlobalState;
use PHPUnit\Framework\Attributes\RunInSeparateProcess;
use PHPUnit\Framework\Attributes\Test;
use PHPUnit\Framework\TestCase;

/**
 * Class CookieWrapperTest
 *
 * @author                 Nicolas Schäfli <ns@studer-raimann.ch>
 */
#[BackupGlobals(false)]
#[BackupStaticProperties(false)]
#[PreserveGlobalState(false)]
class CookieJarWrapperTest extends TestCase
{
    private static CookieFactoryImpl $cookieFactory;
    private static CookieJarFactoryImpl $cookieJarFactory;


    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        self::$cookieFactory = new CookieFactoryImpl();
        self::$cookieJarFactory = new CookieJarFactoryImpl();
    }


    #[Test]
    public function testWithDoesNotChangeTheCurrentObject(): void
    {
        $cookieName = "YummyCookie";
        $cookieValue = "MilkAndChocolate";
        $cookie = self::$cookieFactory->create($cookieName, $cookieValue);
        $cookieJar = self::$cookieJarFactory->fromCookieStrings([]);

        $newCookieJar = $cookieJar->with($cookie);

        $this->assertFalse($cookieJar->has($cookieName));
        $this->assertTrue($newCookieJar->has($cookieName));

        $this->assertNotEquals($cookieJar, $newCookieJar);
    }


    #[Test]
    public function testWithoutDoesNotChangeTheCurrentObject(): void
    {
        $cookieName = "YummyCookie";
        $cookieValue = "MilkAndChocolate";

        //create a new jar with one cookie
        $cookieJar = self::$cookieJarFactory->fromCookieStrings([ $cookieName . '=' . $cookieValue . ';' ]);

        //remove cookie
        $newCookieJar = $cookieJar->without($cookieName);

        //old jar should hold the cookie
        $this->assertTrue($cookieJar->has($cookieName));

        //new jar should no longer hold the cookie
        $this->assertFalse($newCookieJar->has($cookieName));

        //check that both are not equal (checked because the has function could fail due to a change in the future)
        $this->assertNotEquals($cookieJar, $newCookieJar);
    }
}
